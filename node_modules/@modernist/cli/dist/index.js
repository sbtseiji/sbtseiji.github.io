"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("@modernist/log");
var log = log_1.default("modernist/cli");
var stripDash = function (argument) {
    return argument.replace(/^-?-/, "");
};
var isArgumentName = function (candidate) {
    return /^(-\w$)|(--\w+)/.test(candidate);
};
var parse = function (args) {
    var _a;
    log(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Parsing arguments: ", ""], ["Parsing arguments: ", ""])), args);
    var parsed = {};
    for (var index = 0; index < args.length; index += 1) {
        var argument = args[index];
        log(templateObject_2 || (templateObject_2 = __makeTemplateObject(["Parsing argument: ", ""], ["Parsing argument: ", ""])), argument);
        if (!isArgumentName(argument)) {
            log(templateObject_3 || (templateObject_3 = __makeTemplateObject(["", " is not a valid name for an argument - bailing"], ["", " is not a valid name for an argument - bailing"])), argument);
            throw new Error("Failed to parse argument: " + argument + " - invalid name");
        }
        var value = void 0;
        log(templateObject_4 || (templateObject_4 = __makeTemplateObject(["Attempting to parse name=value notation"], ["Attempting to parse name=value notation"])));
        var split = argument.split("=");
        if (split[1]) {
            log(templateObject_5 || (templateObject_5 = __makeTemplateObject(["We have a name=value notation"], ["We have a name=value notation"])));
            _a = __read(split, 2), value = _a[0], value = _a[1];
        }
        else if (args[index + 1] && !isArgumentName(args[index + 1])) {
            log(templateObject_6 || (templateObject_6 = __makeTemplateObject(["argument value is in the next element - skipping it"], ["argument value is in the next element - skipping it"])));
            value = args[index + 1];
            index += 1;
        }
        else {
            log(templateObject_7 || (templateObject_7 = __makeTemplateObject(["No value associated with argument - treating it as boolean"], ["No value associated with argument - treating it as boolean"])));
            value = true;
        }
        log(templateObject_8 || (templateObject_8 = __makeTemplateObject(["Argument name is ", " and value is ", ""], ["Argument name is ", " and value is ", ""])), argument, value);
        parsed[stripDash(argument)] = value;
    }
    return parsed;
};
var cli = function (config) { return __awaiter(void 0, void 0, void 0, function () {
    var actions, version, command, args;
    return __generator(this, function (_a) {
        actions = config.actions;
        log(templateObject_9 || (templateObject_9 = __makeTemplateObject(["Adding argument parser configuration"], ["Adding argument parser configuration"])));
        version = require("../package.json").version;
        log(templateObject_10 || (templateObject_10 = __makeTemplateObject(["Reported version: ", ""], ["Reported version: ", ""])), version);
        Object.entries(actions).forEach(function (_a) {
            var _b = __read(_a, 2), command = _b[0], value = _b[1];
            var desc = value.description || "Generates branch " + command + " of .modernistrc.js";
            log(templateObject_11 || (templateObject_11 = __makeTemplateObject(["Start setting up options for command: ", ""], ["Start setting up options for command: ", ""])), command);
            log(templateObject_12 || (templateObject_12 = __makeTemplateObject(["Adding command: ", " with description: ", ""], ["Adding command: ", " with description: ", ""])), command, desc);
            Object.entries(value.args || {}).forEach(function (_a) {
                var _b = __read(_a, 2), name = _b[0], description = _b[1];
                log(templateObject_13 || (templateObject_13 = __makeTemplateObject(["Adding option: ", " to command: ", " with description: ", ""], ["Adding option: ", " to command: ", " with description: ", ""])), name, command, description);
            });
        });
        command = process.argv[2];
        args = parse(process.argv.slice(3));
        log(templateObject_14 || (templateObject_14 = __makeTemplateObject(["After parsing we have command: ", " with arguments: ", ""], ["After parsing we have command: ", " with arguments: ", ""])), command, args);
        return [2 /*return*/, { command: command, args: args }];
    });
}); };
exports.default = cli;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14;
//# sourceMappingURL=index.js.map