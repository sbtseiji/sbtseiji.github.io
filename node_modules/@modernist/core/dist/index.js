"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var log_1 = require("@modernist/log");
var manifest_1 = require("@modernist/manifest");
var util_1 = require("@modernist/util");
var log = log_1.default("modernist/core");
var isTree = function (candidate) {
    return typeof candidate === "object";
};
var modernist = function (_a, config, rootDir) {
    var name = _a.name, args = _a.args;
    return __awaiter(void 0, void 0, void 0, function () {
        var unit, relative, directory, tree, parseTree_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, , 3, 4]);
                    unit = config.actions[name];
                    log(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Selected unit: ", ""], ["Selected unit: ", ""])), unit);
                    relative = unit.relative;
                    directory = relative ? process.cwd() : rootDir;
                    log(templateObject_2 || (templateObject_2 = __makeTemplateObject(["Selected directory: ", ", because ", ""], ["Selected directory: ", ", because ",
                        ""])), directory, relative ? "relative unit" : "absolute unit");
                    return [4 /*yield*/, unit(args)];
                case 1:
                    tree = _b.sent();
                    log(templateObject_3 || (templateObject_3 = __makeTemplateObject(["Parsing tree"], ["Parsing tree"])));
                    parseTree_1 = function (tree, dir) {
                        log(templateObject_4 || (templateObject_4 = __makeTemplateObject(["Walking tree with base directory: ", ""], ["Walking tree with base directory: ", ""])), dir);
                        manifest_1.default.update({ type: "directory", path: dir });
                        return util_1.walkObject(tree, function (key, tplOrTree) { return __awaiter(void 0, void 0, void 0, function () {
                            var nextPath, file;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        log(templateObject_5 || (templateObject_5 = __makeTemplateObject(["Processing unit: ", ""], ["Processing unit: ", ""])), key);
                                        nextPath = path_1.join(dir, key);
                                        if (!isTree(tplOrTree)) return [3 /*break*/, 2];
                                        log(templateObject_6 || (templateObject_6 = __makeTemplateObject(["", " contains a tree"], ["", " contains a tree"])), key);
                                        log(templateObject_7 || (templateObject_7 = __makeTemplateObject(["Making sure ", " exists"], ["Making sure ", " exists"])), nextPath);
                                        manifest_1.default.update({ type: "directory", path: nextPath });
                                        log(templateObject_8 || (templateObject_8 = __makeTemplateObject(["Recurse on tree parsing"], ["Recurse on tree parsing"])));
                                        return [4 /*yield*/, parseTree_1(tplOrTree, nextPath)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                    case 2:
                                        log(templateObject_9 || (templateObject_9 = __makeTemplateObject(["", " contains a template"], ["", " contains a template"])), key);
                                        return [4 /*yield*/, tplOrTree(args)];
                                    case 3:
                                        file = _a.sent();
                                        log(templateObject_10 || (templateObject_10 = __makeTemplateObject(["Writing new file contents:\n", ""], ["Writing new file contents:\\n", ""])), file);
                                        manifest_1.default.update({ type: "file", path: nextPath, contents: file });
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    };
                    return [4 /*yield*/, parseTree_1(tree, directory)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    log(templateObject_11 || (templateObject_11 = __makeTemplateObject(["Done processing"], ["Done processing"])));
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/, manifest_1.default.get()];
            }
        });
    });
};
exports.default = modernist;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11;
//# sourceMappingURL=index.js.map