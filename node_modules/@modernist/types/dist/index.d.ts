export declare type Args = {
    [key: string]: any;
};
export declare type Template = (args: Args) => string | Promise<string>;
export declare type Tree = {
    [key: string]: Template | Tree;
};
export declare type ArgumentDefinition = {
    name: string;
    required?: boolean;
    description?: string;
};
export declare type Unit = {
    (args: Args): Tree | Promise<Tree>;
    description?: string;
    args?: ArgumentDefinition[];
    relative?: boolean;
};
export declare type Config = {
    plugins: Plugin[];
    actions: {
        [key: string]: Unit;
    };
};
export declare type ManifestEntry = {
    path: string;
    type: "file" | "directory";
    contents?: string;
};
export declare type Manifest = ManifestEntry[];
export declare type Command = {
    name: string;
    args: Args;
};
export declare type Next = {
    called: boolean;
    (): Promise<Manifest>;
};
export declare type Plugin = (command: Command, config: Config, rootDir: string, next: Next) => void;
