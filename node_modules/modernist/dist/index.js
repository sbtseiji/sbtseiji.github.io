#! /usr/bin/env node
"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
var cli_1 = require("@modernist/cli");
var config_1 = require("@modernist/config");
var core_1 = require("@modernist/core");
var fs_1 = require("@modernist/fs");
var log_1 = require("@modernist/log");
var plugin_1 = require("@modernist/plugin");
var log = log_1.default("modernist");
var index = function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, config, directory, _b, name, args, plugins;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                log(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Getting configuration"], ["Getting configuration"])));
                return [4 /*yield*/, config_1.default()];
            case 1:
                _a = _c.sent(), config = _a.config, directory = _a.directory;
                log(templateObject_2 || (templateObject_2 = __makeTemplateObject(["Got config: ", " in directory: ", ""], ["Got config: ", " in directory: ", ""])), config, directory);
                log(templateObject_3 || (templateObject_3 = __makeTemplateObject(["Parsing command line arguments"], ["Parsing command line arguments"])));
                return [4 /*yield*/, cli_1.default(config)];
            case 2:
                _b = _c.sent(), name = _b.command, args = _b.args;
                log(templateObject_4 || (templateObject_4 = __makeTemplateObject(["Got command: ", " and arguments: ", ""], ["Got command: ", " and arguments: ", ""])), name, args);
                log(templateObject_5 || (templateObject_5 = __makeTemplateObject(["Initializing plugins"], ["Initializing plugins"])));
                plugins = config.plugins;
                return [4 /*yield*/, plugin_1.default(__spreadArray(__spreadArray([core_1.default], __read(plugins)), [fs_1.default]))({ name: name, args: args }, config, directory)];
            case 3:
                _c.sent();
                return [2 /*return*/];
        }
    });
}); };
index();
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
//# sourceMappingURL=index.js.map